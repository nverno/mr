use mr_types::KeyValue;

// The map function is called once for each input file.
// The contents of the input file are processed to produce key-value pairs
// which are fed to reducer tasks.
#[no_mangle]
pub fn map(filename: String, contents: String) -> Vec<KeyValue> {
    contents
        .split_whitespace()
        .map(|s| KeyValue {
            key: s.to_owned(),
            value: "1".to_owned(),
        })
        .collect()
}

// The reduce function is called once for each key generated by map tasks with
// a list of all the values created for that key by any map task.
#[no_mangle]
pub fn reduce(key: String, values: Vec<String>) -> String {
    values.len().to_string()
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_map() {
        assert_eq!(
            map("f".into(), "a aa aa".into()),
            vec![
                KeyValue {
                    key: "a".into(),
                    value: "1".into()
                },
                KeyValue {
                    key: "aa".into(),
                    value: "1".into()
                },
                KeyValue {
                    key: "aa".into(),
                    value: "1".into()
                },
            ]
        );
    }

    #[test]
    fn test_reduce() {
        assert_eq!(reduce("aa".into(), vec!["1".into(), "1".into()]), "2");
    }
}
